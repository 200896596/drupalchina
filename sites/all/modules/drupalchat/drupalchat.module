<?php


/**
 * @file
 * Module code for DrupalChat.
 */

define('DRUPALCHAT_AJAX', 0);
define('DRUPALCHAT_LONGPOLL',      1);
//define('DRUPALCHAT_APE',    2);

define('DRUPALCHAT_USER_OFFLINE',      0);
define('DRUPALCHAT_USER_ONLINE',      1);
define('DRUPALCHAT_USER_IDLE',      2);

define('DRUPALCHAT_REL_AUTH',      0);
define('DRUPALCHAT_REL_UR',      1);
define('DRUPALCHAT_REL_FF',      2);

/**
 * Implements hook_help().
 */
function drupalchat_help($path, $arg) {
  if ($path == 'admin/help#drupalchat') {
    return '<p>' . t('Provides one on one chat.') . '</p>';
  }
}
/**
 * Implements hook_permission().
 */
function drupalchat_permission() {
  return array(
    'administer drupalchat' => array(
      'title' => t('administer drupalchat'),
      'description' => t('Administer drupalchat'),
    ),
    'access drupalchat' => array(
      'title' => t('access drupalchat'),
      'description' => t('Access drupalchat'),
    ),
  );
}

/**
 * Implements hook_footer().
 */
/*function drupalchat_footer() {
  global $user;
  if (user_access('access drupalchat')) {
    return theme('drupalchat');
  }
}*/


function drupalchat_page_alter(&$page) {
    global $user;
    
    if (user_access('access drupalchat')) {
        //return theme('drupalchat');
        //echo theme('drupalchat');
        //if (variable_get('dev_query', 0)) {
            $page['page_bottom']['devel']= array(
            '#type' => 'markup',
            '#markup' => '<div style="clear:both;">' . theme('drupalchat') . '</div>',
            );
        //}
    }

}


/**
 * Implements hook_theme().
 */
function drupalchat_theme() {
  return array(
    'drupalchat' => array(
      'template' => 'drupalchat',
    ),
    'drupalchat_subpanel' => array(
      'variables' => array('subpanel' => NULL),
    	'template' => 'drupalchat-subpanel',
    ),
  );
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function drupalchat_preprocess_drupalchat(&$variables) {
  $modules = module_invoke_all('drupalchat_subpanel');

  $items = array();
  $items[] = array('data' => _drupalchat_chat(), 'id' => 'chatpanel');
  foreach ($modules as $module) {
    $items[] = array('data' => theme('drupalchat_subpanel', array('subpanel' => $module)), 'id' => $module['name']);
  }

  $variables['subpanels'] = theme('item_list', array('items' => $items, 'title' => NULL, 'type' => 'ul', 'attributes' => array('id' => 'mainpanel')));
  
}

function _drupalchat_chat() {
  global $user;

  $chat = array();
  $chat['name'] = 'chat';
  $chat['header'] = t('Chat');

  $buddylist = _drupalchat_buddylist($user->uid);
  $buddylist_online = _drupalchat_buddylist_online($buddylist);


  //JON COMMENTS
  $chat['contents'] = '<div class="chat_options">';
  //$chat['contents'] .= '<a class="options" href="#">' . t('Options') . '</a>';
  $chat['contents'] .= '<a class="chat_loading" href="#"></a>';
  $chat['contents'] .= '</div>';

  $items = array();
  foreach ($buddylist_online as $key => $value) {
    if ($key != 'total') {
      $items[] = array('data' => '<a class="' . $key . '" href="#">' . $value['name'] . '</a>', 'class' => array('status-' . $value['status']));
    }
  }
  if ($items) {
    $chat['contents'] .= theme('item_list', array('items' => $items));
  }
  else {
    $chat['contents'] .= theme('item_list', array('items' => array(array(
          'data' => l(t('No users online'), 'user'),
          'class' => array('link'),
        ))));
  }
  $chat['text'] = t('Chat') . ' (<span class="online-count">' . count($items) . '</span>)';

  $theme = variable_get('drupalchat_theme', 'light');
  $chat['icon'] = theme('image', array('path' => drupal_get_path('module', 'drupalchat') . '/themes/' . $theme . '/images/loading.gif', 'width' => NULL, 'height' => NULL, 'alt' => t('chat'), 'attributes' => array('class' => 'icon')));

  return theme('drupalchat_subpanel', array('subpanel' => $chat));
}

/**
 * Implements hook_menu().
 */
function drupalchat_menu() {

    // Administration pages.
    $items['admin/config/drupalchat'] = array(
        'title' => 'DrupalChat',
        'description' => 'Administer DrupalChat.',
        'position' => 'left',
        'weight' => -10,
        'page callback' => 'system_admin_menu_block_page',
        'access arguments' => array('access administration pages'),
        'file' => 'system.admin.inc',
    );



    $items['admin/config/drupalchat/configuration'] = array(
        'title' => 'Configure',
        'description' => 'Configure DrupalChat module.',
        'page callback' => 'drupal_get_form',
        'access arguments' => array('administer drupalchat'),
        'page arguments' => array('drupalchat_settings_form'),
        'file' => 'drupalchat.admin.inc',
        'weight' => 10,
    );


  /*$items['admin/config/drupalchat'] = array(
    	'title' => 'DrupalChat',
    	'description' => 'Administer DrupalChat',	
    	'page callback' => 'drupal_get_form',
    	'page arguments' => array('drupalchat_settings_form'),
    	'access arguments' => array('administer drupalchat'),	
    	'file' => 'drupalchat.admin.inc',
    );*/
  $items['drupalchat/poll'] = array(
		'page callback' => 'drupalchat_poll',
		'access arguments' => array('access drupalchat'),
		'type' => MENU_CALLBACK,
	);
  $items['drupalchat/send'] = array(
		'page callback' => 'drupalchat_send',
		'access arguments' => array('access drupalchat'),
		'type' => MENU_CALLBACK,
	);
  $items['drupalchat/status'] = array(
    'page callback' => 'drupalchat_status',
    'access arguments' => array('access drupalchat'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_cron().
 */
function drupalchat_cron() {
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query('DELETE FROM {drupalchat_msg} WHERE timestamp < %d', (REQUEST_TIME - 10)) */
  db_delete('drupalchat_msg')
  ->condition('timestamp', (REQUEST_TIME - 10), '<')
  ->execute();
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query('DELETE FROM {drupalchat_users} WHERE timestamp < %d', (REQUEST_TIME - 10)) */
  db_delete('drupalchat_users')
  ->condition('timestamp', (REQUEST_TIME - 10), '<')
  ->execute();
}

/**
 * Implements hook_user_login().
 */
function drupalchat_user_login(&$edit, $account) {
  setcookie("DRUPALCHAT_NEWLOGIN", 1, time()+120);
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query('DELETE FROM {drupalchat_msg} WHERE uid1 = uid2 AND uid1 = %d', $account->uid) */
  db_delete('drupalchat_msg')
  ->condition('uid1', 'uid2')
  ->condition('uid1', $account->uid)
  ->execute();
}

/**
 * Implements hook_user().
 */
function drupalchat_user_OLD($op, &$edit, &$account, $category = NULL) { }

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function drupalchat_init() {
  if (user_access('access drupalchat')) {
    global $user;

    $status = db_query('SELECT status FROM {drupalchat_users} WHERE uid = :uid', array(':uid' => $user->uid))->fetchField();
    if (!$status) {
      $status = DRUPALCHAT_USER_ONLINE;
      $current_user = (object) array(
	      'uid' => $user->uid,
		    'session' => $user->sid,
	      'name' => $user->name,
	      'status' => $status,
	      'timestamp' => REQUEST_TIME,
	    );
      drupal_write_record('drupalchat_users', $current_user);
    }
    else {
      // TODO Please review the conversion of this statement to the D7 database API syntax.
      /* db_query('UPDATE {drupalchat_users} SET timestamp = %d, status = %d WHERE uid = %d', REQUEST_TIME, ($status == DRUPALCHAT_USER_OFFLINE ? DRUPALCHAT_USER_ONLINE : $status), $user->uid) */
      db_update('drupalchat_users')
  ->fields(array(
        'timestamp' => REQUEST_TIME,
        'status' => ($status == DRUPALCHAT_USER_OFFLINE ? DRUPALCHAT_USER_ONLINE : $status),
      ))
  ->condition('uid', $user->uid)
  ->execute();
    }

    $theme = variable_get('drupalchat_theme', 'light');

    $polling_method = variable_get('drupalchat_polling_method', DRUPALCHAT_LONGPOLL);

    $my_settings = array(
      'username' => $user->name,
      'uid' => $user->uid,
      'current_timestamp' => REQUEST_TIME,
      'polling_method' => $polling_method,
      'pollUrl' => url('drupalchat/poll', array('absolute' => TRUE)),
      'sendUrl' => url('drupalchat/send', array('absolute' => TRUE)),
      'statusUrl' => url('drupalchat/status', array('absolute' => TRUE)),
      'status' => $status,
      'goOnline' => t('Go Online'),
      'goIdle' => t('Go Idle'),
      'newMessage' => t('New chat message!'),
      'images' => base_path() . drupal_get_path('module', 'drupalchat') . '/themes/' . $theme . '/images/',
      'sound' => base_path() . drupal_get_path('module', 'drupalchat') . '/swf/sound.swf',
      'noUsers' => theme('item_list', array('items' => array(l(t('No users online'), 'user')))),
      'smileyURL' => base_path() . drupal_get_path('module', 'drupalchat') . '/smileys/very_emotional_emoticons-png/png-32x32/',
    );
    if ($polling_method == DRUPALCHAT_AJAX) {
      $my_settings['refresh_rate'] = variable_get('drupalchat_refresh_rate', 2);
      $my_settings['send_rate'] = variable_get('drupalchat_send_rate', 2);
    }
    drupal_add_js(array('drupalchat' => $my_settings), array('type' => "setting", 'scope' => JS_DEFAULT));
    drupal_add_js(drupal_get_path('module', 'drupalchat') . '/js/swfobject.js');
    if (variable_get('drupalchat_yui_path', NULL)) {
      drupal_add_js(drupalchat_yui_path() . '/yui-min.js');
    }
    drupal_add_js(drupal_get_path('module', 'drupalchat') . '/js/storage-lite.js');
    drupal_add_js(drupal_get_path('module', 'drupalchat') . '/js/jquery.titlealert.min.js');
    drupal_add_js(drupal_get_path('module', 'drupalchat') . '/js/drupalchat.js');
    drupal_add_js(drupal_get_path('module', 'drupalchat') . '/js/ba-emotify.js');
    drupal_add_css(drupal_get_path('module', 'drupalchat') . '/themes/' . $theme . '/' . $theme . '.css');

    //    drupal_add_js(drupal_get_path('module', 'drupalchat') . '/js/ba-emotify.js');		
  }
}

function _drupalchat_touch_user($uid) {
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query('UPDATE {drupalchat_users} SET timestamp = %d WHERE uid = %d', REQUEST_TIME, $uid) */
  db_update('drupalchat_users')
  ->fields(array(
    'timestamp' => REQUEST_TIME,
  ))
  ->condition('uid', $uid)
  ->execute();
}

/**
 * Send messages via ajax
 */
function drupalchat_send() {
  global $user;
  $message = (object) array(
  		'uid1' => $user->uid,
  		'uid2' => check_plain($_POST['drupalchat_uid2']),
  		'message' => check_plain($_POST['drupalchat_message']),
  		'timestamp' => REQUEST_TIME,	
	);
  drupal_write_record('drupalchat_msg', $message);
  drupal_json_output(array());
}

/**
 * Alter status via ajax
 */
function drupalchat_status() {
  global $user;
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query("UPDATE {drupalchat_users} SET status = %d WHERE uid = %d", check_plain($_POST['status']), $user->uid) */
  db_update('drupalchat_users')
  ->fields(array(
    'status' => check_plain($_POST['status']),
  ))
  ->condition('uid', $user->uid)
  ->execute();
  drupal_json_output(array());
}

/**
 * Process and get messages
 */
function drupalchat_poll() {
  global $user;


  $initial_time = REQUEST_TIME;
  $message_count = 0;


  if (isset($_GET['drupalchat_last_timestamp'])) {
    $last_timestamp = check_plain($_GET['drupalchat_last_timestamp']);
  }
  /*if ($_GET['drupalchat_last_timestamp'] > 0) {
    $last_timestamp = check_plain($_GET['drupalchat_last_timestamp']);
  }*/
  else {
    $last_timestamp = $initial_time;
      //$last_timestamp = 1;
  }

  $buddylist = _drupalchat_buddylist($user->uid);
  $buddylist_online_old = _drupalchat_buddylist_online($buddylist);



  $polling_method = variable_get('drupalchat_polling_method', DRUPALCHAT_LONGPOLL);

  //echo $polling_method;
  //die;

  $json['messages'] = array();

  if ($polling_method == DRUPALCHAT_AJAX) {
    $messages = db_query('SELECT u.name, m.uid1, m.uid2, m.message, m.timestamp FROM {drupalchat_msg} m INNER JOIN {users} u ON m.uid1 = u.uid WHERE m.uid2 = :uid2 AND m.timestamp > :timestamp ORDER BY m.timestamp ASC', array(':uid2' => $user->uid, ':timestamp' => $last_timestamp));
    foreach ($messages as $message) {
      $json['messages'][] = array('message' => $message->message, 'timestamp' => date("H:i", $message->timestamp), 'uid1' => $message->uid1, 'name' => $message->name);
      if ($message->timestamp > $last_timestamp) {
        $last_timestamp = $message->timestamp;
      }
    }


    //echo 'SELECT u.name, m.uid1, m.uid2, m.message, m.timestamp FROM {drupalchat_msg} m INNER JOIN {users} u ON m.uid1 = u.uid WHERE m.uid2 = '.$user->uid.' AND m.timestamp > '.$last_timestamp.' ORDER BY m.timestamp ASC';

    _drupalchat_touch_user($user->uid);
    module_invoke_all('drupalchat_ajaxpoll'); // AJAX poll hook
  }
  elseif ($polling_method == DRUPALCHAT_LONGPOLL) {
    do {
      sleep(3);
      $buddylist_online = _drupalchat_buddylist_online($buddylist);
      //$message_count = db_query('SELECT COUNT(*) FROM {drupalchat_msg} m INNER JOIN {users} u ON m.uid1 = u.uid WHERE m.uid2 = :m.uid2 AND m.timestamp > :m.timestamp', array(':m.uid2' => $user->uid, ':m.timestamp' => $last_timestamp))->fetchField();
      $message_count = db_query('   SELECT COUNT(*)
                                    FROM {drupalchat_msg} m
                                    INNER JOIN {users} u ON m.uid1 = u.uid
                                    WHERE m.uid2 = :uid2
                                    AND m.timestamp > :timestamp', array(':uid2' => $user->uid, ':timestamp' => $last_timestamp))->fetchField();
      _drupalchat_touch_user($user->uid);
      module_invoke_all('drupalchat_longpoll'); // Long poll hook
    } while (((REQUEST_TIME - $initial_time) < (ini_get('max_execution_time') - 5)) && ($message_count == 0) && (_drupalchat_buddylist_diff($buddylist_online_old, $buddylist_online)));
  }
  
  
  
  if ($message_count > 0) {
  
    $messages = db_query('SELECT u.name, m.uid1, m.uid2, m.message, m.timestamp FROM {drupalchat_msg} m INNER JOIN {users} u ON m.uid1 = u.uid WHERE m.uid2 = :uid2 AND m.timestamp > :timestamp ORDER BY m.timestamp ASC', array(':uid2' => $user->uid, ':timestamp' => $last_timestamp));


    //while ($message = db_fetch_object($messages)) {
    // Drupal 7
    foreach ($messages as $message) {
      $json['messages'][] = array('message' => $message->message, 'timestamp' => date("H:i", $message->timestamp), 'uid1' => $message->uid1, 'name' => $message->name);
      if ($message->timestamp > $last_timestamp) {
        $last_timestamp = $message->timestamp;
      }
    }
  }
  $json['status'] = 0;
  $json['total_messages'] = $message_count;
  $json['last_timestamp'] = $last_timestamp;
  $json['buddylist'] = isset($buddylist_online) ? $buddylist_online : $buddylist_online_old;


  /*echo '<pre>';
  print_r($json);
  echo '</pre>';*/

  drupal_json_output($json);
}

function _drupalchat_buddylist($uid) {
  $users = array();
  $drupalchat_rel = variable_get('drupalchat_rel', DRUPALCHAT_REL_AUTH);
  if ($drupalchat_rel == DRUPALCHAT_REL_UR) {
    $relationships = user_relationships_load(array('name' => variable_get('drupalchat_ur_name', 'friend'), 'user' => $uid, 'approved' => 1), array(), TRUE);
    foreach ($relationships as $rid => $relationship) {
      $uid == $relationship->requester_id ? $users[] = $relationship->requestee_id : $users[] = $relationship->requester_id;
    }
  }
  elseif ($drupalchat_rel == DRUPALCHAT_REL_FF) {
    $result = db_query("SELECT * FROM {flag_friend} WHERE uid = :uid OR friend_uid = :uid", array(':uid' => $uid, ':friend_uid' => $uid));
    //while ($friend = db_fetch_object($result)) {
    // Drupal 7
    foreach ($result as $friend) {
      $uid == $friend->uid ? $users[] = $friend->friend_uid : $users[] = $friend->uid;
    }
  }

  return $users;
}

function _drupalchat_buddylist_online($buddylist) {
  global $user;

  $users = array();
  if (variable_get('drupalchat_rel', DRUPALCHAT_REL_AUTH) > DRUPALCHAT_REL_AUTH) {
    // Return empty on an empty buddylist
    if (empty($buddylist)) {
      $users['total'] = 0;
      return $users;
    }

    foreach ($buddylist as $uid) {
      $where[] = 'uid = :uid';
      $args[':uid'] = $uid;
    }
    $args [':timestamp'] = (REQUEST_TIME - 5);

    // TODO Please convert this statement to the D7 database API syntax.
    //$result = db_query('SELECT uid, name, status FROM {drupalchat_users} WHERE timestamp >= ' . (REQUEST_TIME - 5) . ' AND (' . implode(' OR ', $where) . ') ORDER BY status, name', $args);
    $result = db_query('SELECT uid, name, status FROM {drupalchat_users} WHERE timestamp >= :timestamp AND (' . implode(' OR ', $where) . ') ORDER BY status, name', $args);
  }
  else {
    //$result = db_query('SELECT uid, name, status FROM {drupalchat_users} WHERE timestamp >= :timestamp AND uid <> :uid ORDER BY status, name', array(':timestamp' => (REQUEST_TIME - 10), ':uid' => $user->uid));
    $result = db_query('SELECT uid, name, status FROM {drupalchat_users} WHERE timestamp >= :timestamp AND uid <> :uid ORDER BY status, name', array(':timestamp' => (REQUEST_TIME - 10), ':uid' => $user->uid));
    //echo 'SELECT uid, name, status FROM drupalchat_users WHERE timestamp >= '.(REQUEST_TIME - 10).' AND uid <> '.$user->uid.' ORDER BY status, name';
    //die;
  }

  //while ($buddy = db_fetch_object($result)) {
  // Drupal 7
  foreach ($result as $buddy) {
    $users[$buddy->uid] = array('name' => $buddy->name, 'status' => $buddy->status);
  }
  $users['total'] = count($users);
  

  return $users;
}

function _drupalchat_buddylist_diff($ar1, $ar2) {
  if ($ar1['total'] != $ar2['total']) {
    return FALSE;
  }

  foreach ($ar1 as $key => $value) {
    if (!isset($ar2[$key])) {
      return FALSE;
    }
    if ($value['status'] != $ar2[$key]['status']) {
      return FALSE;
    }
  }

  return TRUE;
}
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function drupalchat_library_path($variable, $match, $filename) {
  module_load_include('inc', 'dxmpp', 'includes/dxmpp.admin');
  $path = _drupalchat_autodiscover_path($match, $filename);
  //echo $path;
  variable_set($variable, $path);
  return $path;
}
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function drupalchat_yui_path($reset = FALSE) {
  static $path;

  if (!isset($path) || $reset) {
    if (!($path = variable_get('drupalchat_yui_path', NULL)) || $reset) {
      $path = drupalchat_library_path('drupalchat_yui_path', '/^yui-min\.js$/i', 'yui-min.js');
    }
  }

  return $path;
}
