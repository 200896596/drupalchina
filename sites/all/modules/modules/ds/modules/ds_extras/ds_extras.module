<?php

/**
 * @file
 * Display Suite extras main functions.
 */

/**
 * Implements hook_menu().
 */
function ds_extras_menu() {
  module_load_include('inc', 'ds_extras', 'ds_extras.registry');
  return _ds_extras_menu();
}

/**
 * Implements hook_entity_info().
 */
function ds_extras_entity_info() {
  module_load_include('inc', 'ds_extras', 'ds_extras.registry');
  return _ds_extras_entity_info();
}

/**
 * Implements hook_permission().
 */
function ds_extras_permission() {

  // Extra check to make sure this doesn't get fired on install.
  if (variable_get('ds_extras_switch_view_mode', FALSE)) {
    $permissions = array();
    foreach (node_type_get_names() as $key => $name) {
      $permissions['ds_switch ' . $key] = array(
        'title' => t('Switch view modes on :type', array(':type' => $name))
      );
    }
    return $permissions;
  }
}

/**
 * Implements hook_menu_alter().
 */
function ds_extras_menu_alter(&$items) {
  module_load_include('inc', 'ds_extras', 'ds_extras.registry');
  _ds_extras_menu_alter($items);
}

/**
 * Implements hook_theme_registry_alter().
 */
function ds_extras_theme_registry_alter(&$theme_registry) {
  module_load_include('inc', 'ds_extras', 'ds_extras.registry');
  _ds_extras_theme_registry_alter($theme_registry);
}

/**
 * Implements hook_module_implements_alter().
 */
function ds_extras_module_implements_alter(&$implementations, $hook) {
  module_load_include('inc', 'ds_extras', 'ds_extras.registry');
  _ds_extras_module_implements_alter($implementations, $hook);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ds_extras_form_field_ui_display_overview_form_alter(&$form, &$form_state) {
  form_load_include($form_state, 'inc', 'ds_extras', 'ds_extras.admin');
  ds_extras_field_ui_alter($form, $form_state);
}

/**
 * Implements hook_field_attach_view_alter().
 */
function ds_extras_field_attach_view_alter(&$build, $context) {

  // If views and core doesn't send information along on the entity,
  // Display suite doesn't have a context to render the fields.
  if (!isset($build['#entity_type']) && !isset($build['#bundle'])) {
    return;
  }

  $block_data = &drupal_static('ds_block_region');
  $region_blocks = variable_get('ds_extras_region_blocks', array());

  if (empty($region_blocks)) {
    return;
  }

  $entity_type = $build['#entity_type'];
  $bundle = $build['#bundle'];
  $view_mode = $context['view_mode'];
  if ($layout = ds_get_layout($entity_type, $bundle, $view_mode)) {
    foreach ($region_blocks as $block_key => $block) {
      if ($block['info'] == "{$entity_type}_{$bundle}_{$view_mode}" && isset($layout['settings']['regions'][$block_key]) && !empty($layout['settings']['regions'][$block_key])) {
        foreach ($layout['settings']['regions'][$block_key] as $key => $field) {
          if (isset($build[$field])) {
            $block_data[$block_key][] = $build[$field];
            unset($build[$field]);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_ds_field_theme_functions_info().
 */
function ds_extras_ds_field_theme_functions_info() {
  return array(
    'theme_field' => t('Default'),
    'theme_ds_field_reset' => t('Reset'),
    'theme_ds_field_expert' => t('Expert'),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ds_extras_form_ds_styles_form_alter(&$form, &$form_state) {
  $form['ds_styles_fields'] = array(
    '#type' => 'textarea',
    '#title' => t('Styles for fields'),
    '#default_value' => variable_get('ds_styles_fields', ''),
    '#description' => t('Configure styles which you can add to fields on the "manage display" screens. Add multiple styles line per line.<br />If you want to have a friendly name, separate class and friendly name by |, but this is not required. eg:<br /><em>class_name_1<br />class_name_2|Friendly name<br />class_name_3</em>')
  );
}

/**
 * Overriden function of theme_field().
 *
 * This function is replaced in ds_extras_theme_registry_alter()
 * for every field. By default theme_field() is called directly.
 */
function theme_ds_field($variables) {

  // We need to be sure this field is in a layout which is rendered by DS.
  if (!ds_get_layout($variables['element']['#entity_type'], $variables['element']['#bundle'], $variables['element']['#view_mode'])) {
    return theme_field($variables);
  }

  $config = array();
  static $field_settings = array();
  if (!isset($field_settings[$variables['element']['#entity_type']][$variables['element']['#bundle']][$variables['element']['#view_mode']])) {
    $field_settings[$variables['element']['#entity_type']][$variables['element']['#bundle']][$variables['element']['#view_mode']] = ds_get_field_settings($variables['element']['#entity_type'], $variables['element']['#bundle'], $variables['element']['#view_mode']);
  }

  // Get the field name.
  $field_name = $variables['element']['#field_name'];

  // Check if this field has custom output settings.
  if (isset($field_settings[$variables['element']['#entity_type']][$variables['element']['#bundle']][$variables['element']['#view_mode']][$field_name]['ft'])) {
    $config = $field_settings[$variables['element']['#entity_type']][$variables['element']['#bundle']][$variables['element']['#view_mode']][$field_name]['ft'];
  }

  // Styles
  if (isset($config['styles'])) {
    $variables['classes'] .= ' ' . $config['styles'];
  }

  // Alter the label if configured.
  if (!$variables['label_hidden']) {
    if (isset($config['lb'])) {
      $variables['label'] = t(check_plain($config['lb']));
    }
  }

  // Call the field output function.
  // We're not babysitting here, the function must exist.
  if (isset($config['func'])) {
    return $config['func']($variables, $config);
  }

  // Default field function.
  $default_field_function = variable_get('ft-default', 'theme_field');
  return $default_field_function($variables, $config);
}

/**
 * Reset all HTML for the field.
 */
function theme_ds_field_reset($variables, $config) {
  $output = '';

  // Render the label.
  if (!$variables['label_hidden']) {
    $output .= '<div class="label-' . $variables['element']['#label_display'] . '">' . $variables['label'] . ':&nbsp;</div>';
  }

  // Render the items.
  foreach ($variables['items'] as $delta => $item) {
    $output .= drupal_render($item);
  }

  return $output;
}

/**
 * Custom output all HTML for the field.
 */
function theme_ds_field_expert($variables, $config) {
  $output = '';

  // Render the label if it's not hidden
  if (!$variables['label_hidden']) {
    if (isset($config['lb-el'])) {
      if (!empty($config['lb-cl'])) {
        $class = ' class="label-' . $variables['element']['#label_display'] . ' ' . $config['lb-cl'] . '"';
      }
      else {
        $class = ' class="label-' . $variables['element']['#label_display'] . '"';
      }
      $output .= '<' . $config['lb-el'] . $class . '>' . $variables['label'] . ':&nbsp;</' . $config['lb-el'] . '>';
    }
    else {
      $output .= '<div class="label-' . $variables['element']['#label_display'] . '">' . $variables['label'] . ':&nbsp;</div>';
    }
  }

  // Field items wrapper
  if (isset($config['fis'])) {
    $fis_wrapper = $config['fis-el'];
    $class = (!empty($config['fis-cl'])) ? ' class="' . $config['fis-cl'] . '"' : '';
    $output .= '<' . $fis_wrapper . $class . '>';
  }

  // Field item wrapper.
  if (isset($config['fi'])) {
    $fi_wrapper = $config['fi-el'];
  }

  // Render items.
  foreach ($variables['items'] as $delta => $item) {
    // Field item wrapper.
    if (isset($config['fi'])) {
      $classes = ($delta % 2 ? 'odd' : 'even');
      if (!empty($config['fi-cl'])) {
        $classes .= ' ' . $config['fi-cl'];
      }
      $output .= '<' . $fi_wrapper . ' class="' . $classes . '">';
    }

    // Render field content.
    $output .= drupal_render($item);

    // Closing field item wrapper.
    if (isset($config['fi'])) {
      $output .= '</' . $fi_wrapper . '>';
    }
  }

  // Closing field items wrapper.
  if (isset($config['fis'])) {
    $output .= '</' . $fis_wrapper . '>';
  }

  // Outer wrapper.
  if (isset($config['ow'])) {
    $ow_wrapper = $config['ow-el'];
    $class = (!empty($config['ow-cl'])) ? ' class="' . $config['ow-cl'] . '"' : '';
    $output = '<' . $ow_wrapper . $class . '>' . $output . '</' . $ow_wrapper . '>';
  }

  return $output;
}

/**
 * Utility funtion to return the view mode for the current entity.
 *
 * The drupal_static is called in ds_extras_node_show to set
 * the current view mode. Through this technique, the hide page
 * title functionality can also work across other view modes
 * if another one is chosen for the full page of the node.
 */
function ds_extras_get_view_mode() {
  return drupal_static('ds_extras_view_mode', 'full');
}

/**
 * Hide the page title for a full node page view.
 */
function ds_extras_process_page_title(&$variables) {
  if (isset($variables['node']) && node_is_page($variables['node']) && arg(2) == '' && $layout = ds_get_layout('node', $variables['node']->type, ds_extras_get_view_mode())) {
    if (isset($layout['settings']['hide_page_title']) && $layout['settings']['hide_page_title']) {
      $variables['title'] = '';
    }
  }
}

/**
 * Switch view mode field.
 */
function ds_extras_switch_view_mode_field($field) {
  $output = '';
  static $added = FALSE;

  if (isset($field['formatter_settings'])) {

    $entity = $field['entity'];
    $id = $entity->nid;
    $url = $field['entity_type'] . '-' . $field['view_mode'] . '-' . $id . '-';
    $switch = array();

    foreach ($field['formatter_settings'] as $key => $value) {
      if (!empty($value)) {
        $class = 'switch-' . $key;
        if ($key == $field['view_mode']) {
          $switch[] = '<span class="' . $class . '">' . check_plain(t($value)) . '</span>';
        }
        else {
          $switch[] = '<span class="' . $class . '"><a href="" class="' . $url . $key . '">' . check_plain(t($value)) . '</a></span>';
        }
      }
    }

    if (!empty($switch)) {
      if (!$added) {
        $add = TRUE;
        drupal_add_js(drupal_get_path('module', 'ds_extras') . '/ds_extras.js');
      }
      $output = '<div class="switch-view-mode-field">' . implode(' ', $switch) . '</div>';
    }
  }

  return $output;
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function ds_extras_contextual_links_view_alter(&$element, $items) {

  if (isset($element['#element']['#entity_type']) && user_access('administer content types')) {
    $entity_type = $element['#element']['#entity_type'];
    $bundle = $element['#element']['#bundle'];
    $view_mode = $element['#element']['#view_mode'];

    // Check if we have a configured layout. Do not fallback to default.
    $layout = ds_get_layout($entity_type, $bundle, $view_mode, FALSE);

    // Get the manage display URI.
    $admin_path = _field_ui_bundle_admin_path($entity_type, $bundle);

    // Check view mode settings.
    $view_mode_settings = field_view_mode_settings($entity_type, $bundle);
    $overriden = (!empty($view_mode_settings[$view_mode]['custom_settings']) ? TRUE : FALSE);

    if (empty($layout) && !$overriden) {
      $admin_path .= '/display';
    }
    else {
      $admin_path .= '/display/' . $view_mode;
    }

    $element['#links']['manage-display'] = array(
      'title' => t('Manage display'),
      'href' => $admin_path,
      'query' => drupal_get_destination(),
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ds_extras_form_fivestar_node_type_tag_form_alter(&$form, &$form_state, $form_id) {
  // We need to alter the settings, because clickable or widget type
  // will be chosen in the field display settings of the content type.
  $node_type = $form_state['fivestar_node_type'];
  if (variable_get('ds_fivestar_' . $node_type, 0)) {
    $form['fivestar']['#default_value'] = TRUE;
  }
  $form['direct']['fivestar_position']['#access'] = FALSE;
  $form['direct']['fivestar_position_teaser']['#access'] = FALSE;
  $form['#submit'][] = 'ds_extras_fivestar_submit';
}

/**
 * Submit callback, reset fivestar_nodetype if needed, but save
 * an extra ds_fivestar_nodetype variable. This way, we are
 * sure that the nodeapi of fivestar isn't fired.
 */
function ds_extras_fivestar_submit($form, $form_state) {
  $values = $form_state['values'];
  $node_type = $form_state['fivestar_node_type'];
  $enabled = isset($values['fivestar']) && $values['fivestar'] == 1;
  if ($enabled) {
    variable_set('fivestar_' . $node_type, 0);
  }
  variable_set('ds_fivestar_' . $node_type, $enabled);
}

/**
 * Implements hook_fivestar_access().
 */
function ds_extras_fivestar_access($type, $id, $tag, $uid) {
  $node = node_load($id);
  if ($type == 'node' && variable_get('ds_fivestar_' . $node->type, 0)) {
    return TRUE;
  }
}

/**
 * Clickable fivestar.
 */
function ds_fivestar_render($field) {

  $format = $field['formatter'];
  if ($format == 'ds_fivestar_clickable') {
    if (user_access('rate content') && fivestar_validate_target('node', $field['entity']->nid, 'vote')) {
      return drupal_render(fivestar_widget_form($field['entity']));
    }
  }

  // Fall through static if not allowed to rate or $format is not clickable.
  return fivestar_static('node', $field['entity']->nid, $field['entity']->type);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ds_extras_form_node_form_alter(&$form, $form_state, $form_id) {

  // Switch full view mode.
  if (user_access('ds_switch ' . $form['#node']->type)) {

    $view_mode_settings = field_view_mode_settings('node', $form['#node']->type);

    // Get the view modes.
    $options = array('' => t('Default'));
    $ds_vm = ds_entity_view_modes('node');
    foreach ($ds_vm as $key => $item) {
      $overriden = (!empty($view_mode_settings[$key]['custom_settings']) ? TRUE : FALSE);
      if ($overriden) {
        $options[$key] = $item['label'];
      }
    }

    // Only fire if we have more than 1 option.
    if (count($options) > 1) {
      $node = $form['#node'];

      if (!isset($form['ds_extras'])) {
        $form['ds_extras'] = array(
          '#type' => 'fieldset',
          '#title' => t('Display settings'),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          '#group' => 'additional_settings',
          '#weight' => 100,
        );
      }

      $form['ds_extras']['ds_switch'] = array(
        '#type' => 'select',
        '#title' => t('View mode'),
        '#options' => $options,
        '#default_value' => isset($node->ds_switch) ? $node->ds_switch : '',
        '#description' => t('Switch to a different view mode to display the full page view of this node.'),
        '#weight' => -1,
      );
    }
  }
}

/**
 * Implements hook_block_info().
 */
function ds_extras_block_info() {

  $region_blocks = variable_get('ds_extras_region_blocks', array());

  if (empty($region_blocks)) {
    return array();
  }

  foreach ($region_blocks as $key => $block) {
    $blocks[$key] = array(
      'info' => $block['title'],
      'cache' => DRUPAL_NO_CACHE,
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ds_extras_block_view($delta = '') {
  $data = drupal_static('ds_block_region');
  $region_blocks = variable_get('ds_extras_region_blocks', array());

  if (!empty($data[$delta])) {
    $block = array();
    $block['subject'] = $region_blocks[$delta]['title'];
    $block['content'] = $data[$delta];
    return $block;
  }
}


/**
 * Implements hook_ds_layout_region_alter().
 */
function ds_extras_ds_layout_region_alter($context, &$region_info) {

  $region_blocks = variable_get('ds_extras_region_blocks', array());
  // Bail out if region_blocks is empty or we are working on default view mode.
  if (empty($region_blocks) || $context['view_mode'] == 'default') {
    return;
  }

  $entity_type = $context['entity_type'];
  $bundle = $context['bundle'];
  $view_mode = $context['view_mode'];

  foreach ($region_blocks as $block_key => $block) {

    if ($block['info'] == "{$entity_type}_{$bundle}_{$view_mode}") {
      $region_info['region_options'][$block_key] = $block['title'];
      if (isset($region_info['table_regions'])) {
        $region_info['table_regions'][$block_key] = array(
          'title' => check_plain($block['title']),
          'message' => t('No fields are displayed in this region'),
        );
      }
    }
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function ds_extras_ctools_plugin_api($owner, $api) {
  if ($owner == 'ds_extras' && $api == 'ds_extras') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function ds_extras_field_extra_fields() {
  $extra = array();

  // Register a single field so fields for vd are
  // picked up nicely in the display overview form.
  if (variable_get('ds_extras_vd')) {
    ctools_include('export');
    $vd_settings = ctools_export_crud_load_all('ds_vd');
    foreach ($vd_settings as $vd) {
      $extra['ds_views'][$vd->vd] = array(
        'display' => array(
          'title' => array(
            'label' => t('Title'),
            'description' => t('Title'),
            'weight' => 10,
          ),
        ),
      );
    }
  }

  // Extra fields.
  if (variable_get('ds_extras_fields_extra')) {
    $fields = explode("\n", variable_get('ds_extras_fields_extra_list', FALSE));
    foreach ($fields as $field) {
      $field = trim($field);
      if (!empty($field)) {
        list($entity, $bundle, $field_name) = explode('|', $field);
        $extra[check_plain($entity)][check_plain($bundle)] = array(
          'display' => array(
            $field_name => array(
              'label' => drupal_ucfirst(check_plain($field_name)),
              'description' => drupal_ucfirst(check_plain($field_name)),
              'weight' => 0,
            )
          ),
        );
      }
    }
  }

  return $extra;
}

/**
 * Implements hook_preprocess_views_view().
 */
function ds_extras_preprocess_view_layout(&$variables) {

  if ($layout = ds_get_layout('ds_views', $variables['view']->name . '-' . $variables['view']->current_display, 'default')) {
    $variables['elements']['#entity_type'] = $variables['#entity_type'] = 'ds_views';
    $variables['elements']['#bundle'] = $variables['#bundle'] = $variables['view']->name . '-' . $variables['view']->current_display;
    $variables['elements']['#view_mode'] = 'default';

    $variables['ds_views'] = $variables['view'];
    ds_field_attach_view_alter($variables, array('view_mode' => 'default', 'entity' => $variables['view']));

    // Special case for views function fields.
    if (isset($variables['view']->ds_vd)) {
      foreach ($variables['view']->ds_vd as $key => $value) {
        $variables[$key] = $value;
      }
    }

    ds_entity_variables($variables);
    if (isset($variables['#attached'])) {
      drupal_process_attached($variables);
    }
  }
}

/**
 * Function used for theming the views title, user name etc. Note that
 * this is a function so it can't be overridden by a phptemplate function.
 */
function ds_vd_render_title_field($field) {
  $output = '';
  $formatter = explode('_', $field['formatter']);
  $tag = $formatter[2];
  $output = '<' . $tag . '>' . check_plain($field['entity']->get_title()) . '</' . $tag . '>';

  // Views is a special case, we stack title on the entity.
  $field['entity']->preprocess_fields[] = 'title';
  $field['entity']->ds_vd['title'] = $output;
}
